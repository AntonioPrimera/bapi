<?php
namespace DummyNamespace;

use AntonioPrimera\Bapi\Bapi;
use AntonioPrimera\Bapi\Exceptions\BapiValidationException;
use AntonioPrimera\Bapi\Components\BapiValidationIssue;

class DummyClass extends Bapi
{
    
    /**
     * Business data validation
     *
     * @throws BapiValidationException
     * @return bool | iterable | BapiValidationIssue
     */
    protected function validate() : bool | iterable | BapiValidationIssue
    {
        // Do any validations and return true or an empty array if everything is fine. If any issues occur, use
        // BapiValidationIssue instances to describe the issues and return a BapiValidationIssue instance
        // or a list of BapiValidationIssue instances. A BapiValidationException will be thrown.

        return true;
    }
    
    /**
     * Data preparation for Bapi run
     */
    protected function prepareData() : void
    {
        // Prepare the data for the Bapi. This method doesn't return anything. Anything you change or add,
        // you should add to the bapi instance. Magic getters and setters allow you to set any attribute
    }
    
    /**
     * Authorization check
     *
     * @return bool
     */
    protected function authorize() : bool
    {
        // Return true for a successful authorization check or false to fail the authorization check.
        
        return false;
    }
    
    /**
     * !!!
     * !!!   Don't forget to update this comment:
     * !!!      - explain what the bapi does
     * !!!      - add the parameters, thrown exceptions and return type
     * !!!
     */
    public function handle()
    {
        // Add your business logic here
    }
    
    //--- Available Hooks ---------------------------------------------------------------------------------------------
    
    /**
     * Hook - run before the authorization check
     */
    protected function beforeAuthorization()
    {
        // This method will run just before the authorization.
        // This method will not be run if the bapi is run without authorization check.
    }
    
    /**
     * Hook - run after a successful authorization check
     */
    protected function afterAuthorization()
    {
        // This method will run immediately after the authorization, if the authorization is successful.
        // This method will not be run if the bapi is run without authorization check.
    }
    
    /**
     * Hook - run before the handle method is called.
     */
    protected function beforeHandle()
    {
        // This method is run just before running the handle method, so if you have any logic to run
        // after the authorization and the validation, implement it here.
    }
    
    /**
     * Hook - Post-processing of the bapi result.
     * !!! Don't forget to update this comment and tell what you actually do with the result.
     *
     * @param $result
     *
     * @return mixed
     */
    protected function afterHandle($result) : mixed
    {
        // Any post-bapi-run data processing goes here. The result of the handle method if received as
        // the $result parameter. Whatever you return here, will be the result returned by the bapi
        // If you don't want to post-process the result, just remove this hook.
        
        return $result;
    }

    /**
     * Hook - if any exception is thrown, it is caught and forwarded to this
     * method. You can check it and act on it here. By default, the
     * exception is just thrown and nothing is returned.
     */
    protected function handleException(\Exception $exception)
	{
		throw $exception;
	}
}