<?php
namespace DUMMY_NAMESPACE;

use BAPI_BASE_CLASS;
use AntonioPrimera\Bapi\Exceptions\BapiValidationException;
use AntonioPrimera\Bapi\Components\BapiValidationIssue;

class DUMMY_CLASS extends Bapi
{

    /**
	 * Authorization check
	 */
	protected function authorize() : bool
	{
		// Return boolean true for a successful authorization check or false to fail the authorization check.
		// Delete this method if you don't need authorization checks (not recommended)

		// You may use the $this->actor() method to get the actor object and check it's properties
		// You may also use the $this->can('ability', ...$args) method to call the corresponding Policy method

		return false;
	}

    /**
     * Business data validation
     * @throws BapiValidationException
     */
    protected function validate() : mixed
    {
        // Do any business specific validations. If the validation is successful, return boolean true
		// Any other result will be wrapped in a BapiValidationException and thrown. You may use
		// BapiValidationIssue objects to return validation issues for specific attributes
		// You may also throw a BapiValidationException manually, if you want to.

        return true;
    }
    
    /**
     * Add the business logic here and the necessary arguments, which will be passed to the bapi 'run' method
	 * The arguments will be made accessible as $this->argumentName inside the bapi, so you can use them
	 * in your business logic, during validation and authorization.
	 *
	 * Starting from version BAPI v3.0, the run method only accepts named arguments, for better consistency.
     */
    public function handle()
    {
        // Add your business logic here
    }
}